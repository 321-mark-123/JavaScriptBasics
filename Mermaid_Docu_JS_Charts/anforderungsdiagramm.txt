https://mermaid-js.github.io/mermaid/#/requirementDiagram

Anforderungsdiagramm
Bearbeite diese Seite N|Fest

Ein Anforderungsdiagramm bietet eine Visualisierung für Anforderungen und ihre Verbindungen untereinander und zu anderen dokumentierten Elementen. Die Modellierungsspezifikationen folgen denen, die von SysML v1.6 definiert wurden.

Die Rendering-Anforderungen sind einfach.

    Anforderungsdiagramm

    Anforderung test_req {   id : 1 text : der Testtext . _ risk : high verifymethod : test }
     
       
     
     
    

    element test_entity {   Typ : Simulation }
     
    

    test_entity - erfüllt -> test_req    
<<Requirement>>test_req
Id: 1Text: the test text.Risk: HighVerification: Test
<<Element>>test_entity
Type: simulationDoc Ref: None
<<satisfies>>
Syntax
Es gibt drei Arten von Komponenten in einem Anforderungsdiagramm: Anforderung, Element und Beziehung.

Die Grammatik zum Definieren von jedem wird unten definiert. Wörter in spitzen Klammern, wie z. B. <word>, sind aufgezählte Schlüsselwörter, deren Optionen in einer Tabelle ausgearbeitet sind. user_defined_...wird überall dort verwendet, wo Benutzereingaben erwartet werden.

Ein wichtiger Hinweis zum Benutzertext: Alle Eingaben können in Anführungszeichen gesetzt werden oder nicht. Beispielsweise sind beide Id: "here is an example"und Id: here is an examplebeide gültig. Benutzer müssen jedoch mit Eingaben ohne Anführungszeichen vorsichtig sein. Der Parser schlägt fehl, wenn ein anderes Schlüsselwort erkannt wird.

Erfordernis
Eine Anforderungsdefinition enthält einen Anforderungstyp, einen Namen, eine ID, einen Text, ein Risiko und eine Überprüfungsmethode. Die Syntax folgt:

<type> user_defined_name {
    id: user_defined_id
    text: user_defined text
    risk: <risk>
    verifymethod: <method>
}
Typ, Risiko und Methode sind in SysML definierte Aufzählungen.

Stichwort	Optionen
Typ	Anforderung, funktionalAnforderung, SchnittstelleAnforderung, LeistungAnforderung, physischAnforderung, DesignEinschränkung
Risiko	Niedrig Mittel Hoch
Verifikationsverfahren	Analyse, Inspektion, Test, Demonstration
Element
Eine Elementdefinition enthält einen Elementnamen, einen Typ und eine Dokumentreferenz. Diese drei sind alle benutzerdefiniert. Das Element-Feature soll leichtgewichtig sein, aber es ermöglichen, Anforderungen mit Teilen anderer Dokumente zu verbinden.

element user_defined_name {
    type: user_defined_type
    docref: user_defined_ref
}
Verhältnis
Beziehungen bestehen aus einem Quellknoten, einem Zielknoten und einem Beziehungstyp.

Jeder folgt dem Definitionsformat von

{name of source} - <type> -> {name of destination}
oder

{name of destination} <- <type> - {name of source}
„Name der Quelle“ und „Name des Ziels“ sollten Namen von Anforderungs- oder Elementknoten sein, die an anderer Stelle definiert sind.

Ein Beziehungstyp kann einer der folgenden sein: enthält, kopiert, leitet ab, erfüllt, verifiziert, verfeinert oder verfolgt.

Jede Beziehung ist im Diagramm gekennzeichnet.

Größeres Beispiel
Dieses Beispiel verwendet alle Funktionen des Diagramms.

    Anforderungsdiagramm

    Anforderung test_req {   id : 1 text : der Testtext . _ risk : high verifymethod : test }
     
       
     
     
    

    FunctionalRequirement test_req2 {   id : 1.1 text : der zweite Testtext . _ Risiko : niedrig Verifizierungsmethode : Inspektion }
     
        
     
     
    

    performanceRequirement test_req3 {   id : 1.2 text : der dritte Testtext . _ Risiko : mittel Verifizierungsmethode : Demonstration }
     
        
     
     
    

    interfaceRequirement test_req4 {   id : 1.2.1 text : der vierte Testtext . _ Risiko : mittel Prüfmethode : Analyse }
     
        
     
     
    

    physicalRequirement test_req5 {   id : 1.2.2 text : der fünfte Testtext . _ Risiko : mittel Prüfmethode : Analyse }
     
        
     
     
    

    designConstraint test_req6 {   id : 1.2.3 text : der sechste Testtext . _ Risiko : mittel Prüfmethode : Analyse }
     
        
     
     
    

    element test_entity {   Typ : Simulation }
     
    

    element test_entity2 {   Typ : Wortdokument docRef : reqs / test_entity } _
      
     
    

    element test_entity3 {   type : "test suite" docRef : github . de / all_the_tests }
     
     
    


    test_entity – erfüllt -> test_req2     test_req – verfolgt -> test_req2 test_req – enthält -> test_req3 test_req3 – enthält -> test_req4 test_req4 – leitet -> test_req5 test_req5 – verfeinert -> test_req6 test_entity3 – verifiziert -> test_req5 test_req <- kopiert – test_entity2
        
        
        
        
        
        
        